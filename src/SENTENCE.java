/* Generated By:JavaCC: Do not edit this line. SENTENCE.java */
public class SENTENCE implements SENTENCEConstants {
  public static void main(String args []) throws ParseException  {
    SENTENCE sentence = new SENTENCE(System.in);
    while (true) {
      System.out.println("Lendo do teclado...");
      try {
                sentence.Parse();
      }
      catch (Exception e) {
        System.out.println("Erro sint\u00e1tico.");
        System.out.println(e.getMessage());
        break;
      }
      catch (Error e) {
        System.out.println("Erro l\u00e9xico.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public void Parse() throws ParseException, ParseException, TokenMgrError {
    trace_call("Parse");
    try {
                                                          Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTINUE:
        t = jj_consume_token(CONTINUE);
                   System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case EXIT:
        t = jj_consume_token(EXIT);
               System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case RETURN:
        t = jj_consume_token(RETURN);
                 System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case WHILE:
        t = jj_consume_token(WHILE);
                System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case BREAK:
        t = jj_consume_token(BREAK);
                System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case ELSE:
        t = jj_consume_token(ELSE);
               System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case NEXT:
        t = jj_consume_token(NEXT);
               System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case DELETE:
        t = jj_consume_token(DELETE);
                 System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case FOR:
        t = jj_consume_token(FOR);
              System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case IF:
        t = jj_consume_token(IF);
             System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case DO:
        t = jj_consume_token(DO);
             System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case IN:
        t = jj_consume_token(IN);
             System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case PRINT:
        t = jj_consume_token(PRINT);
                System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case GETLINE:
        t = jj_consume_token(GETLINE);
                  System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case PADRAO_ID:
        t = jj_consume_token(PADRAO_ID);
                    System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case CIFRAO:
        t = jj_consume_token(CIFRAO);
                 System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case OP_RELACIONAL:
        t = jj_consume_token(OP_RELACIONAL);
                        System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case OP_ATRIBUICAO:
        t = jj_consume_token(OP_ATRIBUICAO);
                        System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case FUNCAO_MAT:
        t = jj_consume_token(FUNCAO_MAT);
                     System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case FUNCAO_IO:
        t = jj_consume_token(FUNCAO_IO);
                    System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case FIM:
        t = jj_consume_token(FIM);
              System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case DIGITO:
        t = jj_consume_token(DIGITO);
                 System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case LETRA:
        t = jj_consume_token(LETRA);
                System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case STRING:
        t = jj_consume_token(STRING);
                 System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case NUMERO:
        t = jj_consume_token(NUMERO);
                 System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case LISTA_VAR:
        t = jj_consume_token(LISTA_VAR);
                    System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case VAR:
        t = jj_consume_token(VAR);
              System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case VAR_ARRAY:
        t = jj_consume_token(VAR_ARRAY);
                    System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case VAR_BODY:
        t = jj_consume_token(VAR_BODY);
                   System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case ABRE_PARENTESES:
        t = jj_consume_token(ABRE_PARENTESES);
                          System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case FECHA_PARENTESES:
        t = jj_consume_token(FECHA_PARENTESES);
                           System.out.println("@("+ t.beginLine+","+t.beginColumn+")\u005ct"+t.toString());
        break;
      case 0:
        jj_consume_token(0);
           System.exit(0);
        Programa();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Parse");
    }
  }

  static final public void Programa() throws ParseException {
    trace_call("Programa");
    try {
      Comandos();
    } finally {
      trace_return("Programa");
    }
  }

  static final public void Comandos() throws ParseException {
    trace_call("Comandos");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PADRAO_ID:
      case 36:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PADRAO_ID:
          jj_consume_token(PADRAO_ID);
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        jj_consume_token(36);
        Acao();
        jj_consume_token(37);
        break;
      default:
        jj_la1[3] = jj_gen;
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CIFRAO:
          case ABRE_PARENTESES:
          case STRING:
          case NUMERO:
          case VAR:
          case 41:
          case 46:
          case 51:
          case 52:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_1;
          }
          Padrao();
          jj_consume_token(36);
          Acao();
          jj_consume_token(37);
        }
      }
    } finally {
      trace_return("Comandos");
    }
  }

  static final public void Padrao() throws ParseException {
    trace_call("Padrao");
    try {
      if (jj_2_1(100)) {
        Exp_relacional();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 38:
          case 39:
          case 40:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_2;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 38:
            jj_consume_token(38);
            break;
          case 39:
            jj_consume_token(39);
            break;
          case 40:
            jj_consume_token(40);
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Exp_relacional();
        }
      } else if (jj_2_2(100)) {
        jj_consume_token(ABRE_PARENTESES);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 41:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_3;
          }
          jj_consume_token(41);
        }
        Exp_relacional();
        jj_consume_token(FECHA_PARENTESES);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CIFRAO:
        case ABRE_PARENTESES:
        case STRING:
        case NUMERO:
        case VAR:
        case 41:
        case 46:
        case 51:
        case 52:
          Expressao();
          jj_consume_token(42);
          Expressao();
          jj_consume_token(43);
          Exp_atribuicao();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Padrao");
    }
  }

  static final public void Acao() throws ParseException {
    trace_call("Acao");
    try {
      Declaracao();
    } finally {
      trace_return("Acao");
    }
  }

  static final public void Declaracao() throws ParseException {
    trace_call("Declaracao");
    try {
      if (jj_2_3(100)) {
        D_Expressao();
      } else if (jj_2_4(100)) {
        D_funcao();
      } else if (jj_2_5(100)) {
        D_lista();
      } else if (jj_2_6(100)) {
        D_if();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
        case FOR:
        case DO:
        case VAR:
          D_loop();
          break;
        case CONTINUE:
        case RETURN:
        case BREAK:
          D_control();
          break;
        case 36:
          jj_consume_token(36);
          D_lista();
          jj_consume_token(37);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Declaracao");
    }
  }

  static final public void D_Expressao() throws ParseException {
    trace_call("D_Expressao");
    try {
      Expressao();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIM:
        jj_consume_token(FIM);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } finally {
      trace_return("D_Expressao");
    }
  }

  static final public void D_funcao() throws ParseException {
    trace_call("D_funcao");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXIT:
        jj_consume_token(EXIT);
        jj_consume_token(ABRE_PARENTESES);
        Expressao();
        jj_consume_token(FECHA_PARENTESES);
        break;
      case DELETE:
        jj_consume_token(DELETE);
        jj_consume_token(VAR_ARRAY);
        break;
      case FUNCAO_MAT:
        D_funcao_matematica();
        break;
      case PRINT:
      case GETLINE:
        D_funcao_io();
        break;
      case FUNCAO_IO:
        D_funcao_string();
        break;
      case NEXT:
        jj_consume_token(NEXT);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(FIM);
    } finally {
      trace_return("D_funcao");
    }
  }

  static final public void D_if() throws ParseException {
    trace_call("D_if");
    try {
      jj_consume_token(IF);
      jj_consume_token(ABRE_PARENTESES);
      Expressao();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
        jj_consume_token(IN);
        jj_consume_token(VAR_ARRAY);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(FECHA_PARENTESES);
      Declaracao();
      if (jj_2_7(100)) {
        jj_consume_token(ELSE);
        Declaracao();
      } else {
        ;
      }
    } finally {
      trace_return("D_if");
    }
  }

  static final public void D_loop() throws ParseException {
    trace_call("D_loop");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(ABRE_PARENTESES);
        Expressao();
        jj_consume_token(FECHA_PARENTESES);
        Declaracao();
        break;
      case DO:
        jj_consume_token(DO);
        Declaracao();
        jj_consume_token(WHILE);
        jj_consume_token(ABRE_PARENTESES);
        Expressao();
        jj_consume_token(FECHA_PARENTESES);
        break;
      case FOR:
        jj_consume_token(FOR);
        jj_consume_token(ABRE_PARENTESES);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CIFRAO:
        case ABRE_PARENTESES:
        case STRING:
        case NUMERO:
        case VAR:
        case 41:
        case 46:
        case 51:
        case 52:
          Expressao();
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        jj_consume_token(FIM);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CIFRAO:
        case ABRE_PARENTESES:
        case STRING:
        case NUMERO:
        case VAR:
        case 41:
        case 46:
        case 51:
        case 52:
          Expressao();
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(FIM);
        if (jj_2_8(100)) {
          Expressao();
        } else {
          ;
        }
        break;
      case VAR:
        jj_consume_token(VAR);
        jj_consume_token(IN);
        jj_consume_token(VAR_ARRAY);
        jj_consume_token(FECHA_PARENTESES);
        Declaracao();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("D_loop");
    }
  }

  static final public void D_control() throws ParseException {
    trace_call("D_control");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTINUE:
        jj_consume_token(CONTINUE);
        break;
      case BREAK:
        jj_consume_token(BREAK);
        break;
      case RETURN:
        jj_consume_token(RETURN);
        if (jj_2_9(100)) {
          Expressao();
        } else {
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FIM:
          jj_consume_token(FIM);
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("D_control");
    }
  }

  static final public void D_lista() throws ParseException {
    trace_call("D_lista");
    try {
      label_4:
      while (true) {
        if (jj_2_10(100)) {
          D_Expressao();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXIT:
          case NEXT:
          case DELETE:
          case PRINT:
          case GETLINE:
          case FUNCAO_MAT:
          case FUNCAO_IO:
            D_funcao();
            break;
          case IF:
            D_if();
            break;
          default:
            jj_la1[17] = jj_gen;
            if (jj_2_11(100)) {
              D_loop();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case CONTINUE:
              case RETURN:
              case BREAK:
                D_control();
                break;
              default:
                jj_la1[18] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
        if (jj_2_12(100)) {
          ;
        } else {
          break label_4;
        }
      }
    } finally {
      trace_return("D_lista");
    }
  }

  static final public void Expressao() throws ParseException {
    trace_call("Expressao");
    try {
      Exp_and();
      label_5:
      while (true) {
        if (jj_2_13(100)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(39);
        Exp_and();
      }
    } finally {
      trace_return("Expressao");
    }
  }

  static final public void D_expressao() throws ParseException {
    trace_call("D_expressao");
    try {
      Expressao();
      if (jj_2_14(100)) {
        jj_consume_token(FIM);
      } else {
        ;
      }
    } finally {
      trace_return("D_expressao");
    }
  }

  static final public void D_funcao_matematica() throws ParseException {
    trace_call("D_funcao_matematica");
    try {
      jj_consume_token(FUNCAO_MAT);
      jj_consume_token(ABRE_PARENTESES);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CIFRAO:
      case ABRE_PARENTESES:
      case STRING:
      case NUMERO:
      case VAR:
      case 41:
      case 46:
      case 51:
      case 52:
        Expressao();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 40:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_6;
          }
          jj_consume_token(40);
          Expressao();
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(FECHA_PARENTESES);
    } finally {
      trace_return("D_funcao_matematica");
    }
  }

  static final public void D_funcao_io() throws ParseException {
    trace_call("D_funcao_io");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GETLINE:
        jj_consume_token(GETLINE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABRE_PARENTESES:
        case VAR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VAR:
            jj_consume_token(VAR);
            break;
          case ABRE_PARENTESES:
            jj_consume_token(ABRE_PARENTESES);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VAR:
              jj_consume_token(VAR);
              break;
            default:
              jj_la1[21] = jj_gen;
              ;
            }
            jj_consume_token(FECHA_PARENTESES);
            break;
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
        break;
      case PRINT:
        jj_consume_token(PRINT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CIFRAO:
        case ABRE_PARENTESES:
        case STRING:
        case NUMERO:
        case VAR:
        case VAR_ARRAY:
        case 41:
        case 46:
        case 51:
        case 52:
          if (jj_2_15(100)) {
            Print_lista();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ABRE_PARENTESES:
              jj_consume_token(ABRE_PARENTESES);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case CIFRAO:
              case ABRE_PARENTESES:
              case STRING:
              case NUMERO:
              case VAR:
              case VAR_ARRAY:
              case 41:
              case 46:
              case 51:
              case 52:
                Print_lista();
                break;
              default:
                jj_la1[24] = jj_gen;
                ;
              }
              jj_consume_token(FECHA_PARENTESES);
              break;
            default:
              jj_la1[25] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("D_funcao_io");
    }
  }

  static final public void D_funcao_string() throws ParseException {
    trace_call("D_funcao_string");
    try {
      jj_consume_token(FUNCAO_IO);
      jj_consume_token(ABRE_PARENTESES);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CIFRAO:
      case ABRE_PARENTESES:
      case STRING:
      case NUMERO:
      case VAR:
      case VAR_ARRAY:
      case 41:
      case 44:
      case 46:
      case 51:
      case 52:
        if (jj_2_16(100)) {
          Var_string();
        } else if (jj_2_17(100)) {
          Print_lista();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 44:
            jj_consume_token(44);
            Var_string();
            jj_consume_token(44);
            break;
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 40:
            ;
            break;
          default:
            jj_la1[29] = jj_gen;
            break label_7;
          }
          if (jj_2_18(100)) {
            jj_consume_token(40);
            Var_string();
          } else if (jj_2_19(100)) {
            jj_consume_token(40);
            Print_lista();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 40:
              jj_consume_token(40);
              jj_consume_token(44);
              Var_string();
              jj_consume_token(44);
              break;
            default:
              jj_la1[30] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(FECHA_PARENTESES);
      if (jj_2_20(100)) {
        jj_consume_token(FIM);
      } else {
        ;
      }
    } finally {
      trace_return("D_funcao_string");
    }
  }

  static final public void Print_lista() throws ParseException {
    trace_call("Print_lista");
    try {
      if (jj_2_21(100)) {
        jj_consume_token(VAR);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR_ARRAY:
          jj_consume_token(VAR_ARRAY);
          break;
        default:
          jj_la1[32] = jj_gen;
          if (jj_2_22(100)) {
            Var_string();
          } else if (jj_2_23(100)) {
            D_expressao();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("Print_lista");
    }
  }

  static final public void Exp_relacional() throws ParseException {
    trace_call("Exp_relacional");
    try {
      Exp_atribuicao();
      label_8:
      while (true) {
        if (jj_2_24(100)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(OP_RELACIONAL);
        Exp_atribuicao();
      }
    } finally {
      trace_return("Exp_relacional");
    }
  }

  static final public void Exp_and() throws ParseException {
    trace_call("Exp_and");
    try {
      Exp_not();
      label_9:
      while (true) {
        if (jj_2_25(100)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(38);
        Exp_not();
      }
    } finally {
      trace_return("Exp_and");
    }
  }

  static final public void Exp_not() throws ParseException {
    trace_call("Exp_not");
    try {
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_10;
        }
        jj_consume_token(41);
      }
      Exp_relacional();
    } finally {
      trace_return("Exp_not");
    }
  }

  static final public void Exp_atribuicao() throws ParseException {
    trace_call("Exp_atribuicao");
    try {
      label_11:
      while (true) {
        if (jj_2_26(100)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(VAR);
        jj_consume_token(OP_RELACIONAL);
      }
      Exp_soma();
    } finally {
      trace_return("Exp_atribuicao");
    }
  }

  static final public void Exp_soma() throws ParseException {
    trace_call("Exp_soma");
    try {
      Exp_multiplicacao();
      label_12:
      while (true) {
        if (jj_2_27(100)) {
          ;
        } else {
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 45:
          jj_consume_token(45);
          break;
        case 46:
          jj_consume_token(46);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Exp_multiplicacao();
      }
    } finally {
      trace_return("Exp_soma");
    }
  }

  static final public void Exp_multiplicacao() throws ParseException {
    trace_call("Exp_multiplicacao");
    try {
      Exp_potencia();
      label_13:
      while (true) {
        if (jj_2_28(100)) {
          ;
        } else {
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 47:
          jj_consume_token(47);
          break;
        case 44:
          jj_consume_token(44);
          break;
        case 48:
          jj_consume_token(48);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Exp_potencia();
      }
    } finally {
      trace_return("Exp_multiplicacao");
    }
  }

  static final public void Exp_potencia() throws ParseException {
    trace_call("Exp_potencia");
    try {
      label_14:
      while (true) {
        if (jj_2_29(100)) {
          ;
        } else {
          break label_14;
        }
        Exp_negacao();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
          jj_consume_token(49);
          break;
        case 50:
          jj_consume_token(50);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      Exp_negacao();
    } finally {
      trace_return("Exp_potencia");
    }
  }

  static final public void Exp_negacao() throws ParseException {
    trace_call("Exp_negacao");
    try {
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 46:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_15;
        }
        jj_consume_token(46);
      }
      Exp_inc_dec();
    } finally {
      trace_return("Exp_negacao");
    }
  }

  static final public void Exp_inc_dec() throws ParseException {
    trace_call("Exp_inc_dec");
    try {
      if (jj_2_33(100)) {
        Exp_simples();
        label_16:
        while (true) {
          if (jj_2_30(100)) {
            ;
          } else {
            break label_16;
          }
          Exp_simples();
        }
        if (jj_2_31(100)) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 51:
            jj_consume_token(51);
            break;
          case 52:
            jj_consume_token(52);
            break;
          default:
            jj_la1[38] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CIFRAO:
        case ABRE_PARENTESES:
        case STRING:
        case NUMERO:
        case VAR:
        case 51:
        case 52:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 51:
          case 52:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 51:
              jj_consume_token(51);
              break;
            case 52:
              jj_consume_token(52);
              break;
            default:
              jj_la1[39] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[40] = jj_gen;
            ;
          }
          label_17:
          while (true) {
            if (jj_2_32(100)) {
              ;
            } else {
              break label_17;
            }
            Exp_simples();
          }
          Exp_simples();
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Exp_inc_dec");
    }
  }

  static final public void Exp_simples() throws ParseException {
    trace_call("Exp_simples");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        jj_consume_token(VAR);
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      case ABRE_PARENTESES:
        jj_consume_token(ABRE_PARENTESES);
        Expressao();
        jj_consume_token(FECHA_PARENTESES);
        break;
      case CIFRAO:
        jj_consume_token(CIFRAO);
        Expressao();
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Exp_simples");
    }
  }

  static final public void Var_string() throws ParseException {
    trace_call("Var_string");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        jj_consume_token(VAR);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Var_string");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    if (jj_3_12()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(CIFRAO)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) jj_scanpos = xsp;
    if (jj_scan_token(FIM)) return true;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    if (jj_scan_token(FIM)) return true;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(FECHA_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(FECHA_PARENTESES)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    }
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    if (jj_3R_25()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_scan_token(FECHA_PARENTESES)) return true;
    if (jj_3R_24()) return true;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(EXIT)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(FECHA_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(FIM)) return true;
    return false;
  }

  static private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_25()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(FIM)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(36)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(37)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(41)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_18()) return true;
    if (jj_scan_token(FECHA_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(FECHA_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(40)) return true;
    if (jj_scan_token(44)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(44)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  static private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(44)) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(46)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  static private boolean jj_3R_37() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(VAR)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(VAR_ARRAY)) return true;
    if (jj_scan_token(FECHA_PARENTESES)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    if (jj_scan_token(FECHA_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(OP_RELACIONAL)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(VAR)) return true;
    if (jj_scan_token(OP_RELACIONAL)) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(38)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(40)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(41)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(40)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) jj_scanpos = xsp;
    if (jj_scan_token(FECHA_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  static private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(40)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(PRINT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(GETLINE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(FUNCAO_IO)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    if (jj_scan_token(FECHA_PARENTESES)) return true;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(VAR_ARRAY)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(FIM)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(39)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(FUNCAO_MAT)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    if (jj_scan_token(FECHA_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(VAR_ARRAY)) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_25()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SENTENCETokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffffe1,0x80000,0xc0900000,0x80000,0x0,0x0,0x0,0xc0900000,0xa3a0,0x8000000,0x6061840,0x10000,0xc0900000,0xc0900000,0xa100,0x8000000,0x2a0,0x6065840,0x2a0,0x0,0xc0900000,0x0,0x800000,0x800000,0xc0900000,0x800000,0xc0900000,0x60000,0x0,0x0,0x0,0xc0900000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0900000,0xc0900000,0x40000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xf,0x0,0x184202,0x10,0x1c0,0x1c0,0x200,0x184202,0x12,0x0,0x0,0x0,0x184202,0x184202,0x2,0x0,0x0,0x0,0x0,0x100,0x184202,0x2,0x2,0x2,0x184206,0x0,0x184206,0x0,0x1000,0x100,0x100,0x185206,0x4,0x200,0x6000,0x19000,0x60000,0x4000,0x180000,0x180000,0x180000,0x180002,0x2,0x2,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[33];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SENTENCE(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SENTENCE(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SENTENCETokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SENTENCE(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SENTENCETokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SENTENCE(SENTENCETokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SENTENCETokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 33; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
