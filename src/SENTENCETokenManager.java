/* Generated By:JavaCC: Do not edit this line. SENTENCETokenManager.java */

/** Token Manager. */
public class SENTENCETokenManager implements SENTENCEConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 29;
            return 33;
         }
         if ((active0 & 0x2bb00L) != 0L)
         {
            jjmatchedKind = 29;
            return 150;
         }
         if ((active0 & 0x1b700000000000L) != 0L)
            return 19;
         if ((active0 & 0x100000L) != 0L)
            return 151;
         if ((active0 & 0x440L) != 0L)
         {
            jjmatchedKind = 29;
            return 29;
         }
         if ((active0 & 0x20000000000L) != 0L)
            return 68;
         if ((active0 & 0x14000L) != 0L)
         {
            jjmatchedKind = 29;
            return 92;
         }
         if ((active0 & 0x4800000000000L) != 0L)
            return 66;
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 29;
            return 26;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 29;
            return 37;
         }
         return -1;
      case 1:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
            return 25;
         }
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
            return 28;
         }
         if ((active0 & 0xc000L) != 0L)
            return 152;
         if ((active0 & 0x10000L) != 0L)
            return 95;
         if ((active0 & 0x4000000000000L) != 0L)
            return 19;
         if ((active0 & 0x63f80L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
            return 152;
         }
         return -1;
      case 2:
         if ((active0 & 0x2000L) != 0L)
            return 152;
         if ((active0 & 0x61fe0L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
            return 152;
         }
         return -1;
      case 3:
         if ((active0 & 0xc40L) != 0L)
            return 152;
         if ((active0 & 0x613a0L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
            return 152;
         }
         return -1;
      case 4:
         if ((active0 & 0x20300L) != 0L)
            return 152;
         if ((active0 & 0x410a0L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
            return 152;
         }
         return -1;
      case 5:
         if ((active0 & 0x1080L) != 0L)
            return 152;
         if ((active0 & 0x40020L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 5;
            return 152;
         }
         return -1;
      case 6:
         if ((active0 & 0x40000L) != 0L)
            return 152;
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 6;
            return 152;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_0(0, 41, 68);
      case 36:
         return jjStartNfaWithStates_0(0, 20, 151);
      case 37:
         return jjStartNfaWithStates_0(0, 48, 19);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 40:
         return jjStopAtPos(0, 23);
      case 41:
         return jjStopAtPos(0, 24);
      case 42:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 43:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L);
      case 44:
         return jjStopAtPos(0, 40);
      case 45:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L);
      case 47:
         return jjStartNfaWithStates_0(0, 44, 19);
      case 58:
         return jjStopAtPos(0, 43);
      case 59:
         return jjStopAtPos(0, 27);
      case 63:
         return jjStopAtPos(0, 42);
      case 94:
         return jjStartNfaWithStates_0(0, 49, 19);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x9000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x440L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x14000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 123:
         return jjStopAtPos(0, 36);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 125:
         return jjStopAtPos(0, 37);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 42:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 50, 19);
         break;
      case 43:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         break;
      case 45:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x41880L);
      case 102:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 152);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 16, 95);
         break;
      case 111:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 152);
         return jjMoveStringLiteralDfa2_0(active0, 0x2020L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20200L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 124:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20140L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 152);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x40080L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 152);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x40100L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 152);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 152);
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 152);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40020L);
      case 107:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 152);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 152);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 152);
         break;
      case 110:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 152);
         return jjMoveStringLiteralDfa6_0(active0, 0x40020L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 152);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 5, 152);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 150;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 151:
               case 104:
                  if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 105;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddTwoStates(111, 112);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(109);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(103, 104);
                  }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 105;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddTwoStates(111, 112);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(109);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(103, 104);
                  }
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 105;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddTwoStates(111, 112);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(109);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(103, 104);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAddTwoStates(98, 99);
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 33)
                     jjCheckNAddTwoStates(14, 68);
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(19, 66);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(46, 48);
                  else if (curChar == 45)
                     jjCheckNAdd(19);
                  else if (curChar == 43)
                     jjCheckNAdd(19);
                  else if (curChar == 37)
                     jjCheckNAdd(19);
                  else if (curChar == 47)
                     jjCheckNAdd(19);
                  else if (curChar == 61)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  else if (curChar == 35)
                     jjCheckNAddStates(5, 7);
                  if (curChar == 61)
                     jjCheckNAdd(14);
                  else if (curChar == 62)
                     jjCheckNAdd(14);
                  else if (curChar == 60)
                     jjCheckNAdd(14);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 68:
               case 14:
                  if (curChar == 61 && kind > 21)
                     kind = 21;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 105;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddTwoStates(111, 112);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(109);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(103, 104);
                  }
                  break;
               case 66:
                  if (curChar == 42)
                     jjCheckNAdd(19);
                  else if (curChar == 61)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 3:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 13:
                  if ((0x5000000000000000L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 15:
                  if (curChar == 60)
                     jjCheckNAdd(14);
                  break;
               case 16:
                  if (curChar == 62)
                     jjCheckNAdd(14);
                  break;
               case 17:
                  if (curChar == 61)
                     jjCheckNAdd(14);
                  break;
               case 18:
                  if (curChar == 61 && kind > 22)
                     kind = 22;
                  break;
               case 19:
                  if (curChar == 61 && kind > 22)
                     kind = 22;
                  break;
               case 20:
                  if (curChar == 47)
                     jjCheckNAdd(19);
                  break;
               case 21:
                  if (curChar == 37)
                     jjCheckNAdd(19);
                  break;
               case 22:
                  if (curChar == 43)
                     jjCheckNAdd(19);
                  break;
               case 23:
                  if (curChar == 45)
                     jjCheckNAdd(19);
                  break;
               case 45:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(46, 48);
                  break;
               case 46:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if (curChar == 34 && kind > 30)
                     kind = 30;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(50, 47);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 47);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(52);
                  break;
               case 65:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(19, 66);
                  break;
               case 67:
                  if (curChar == 33)
                     jjCheckNAddTwoStates(14, 68);
                  break;
               case 70:
                  if (curChar == 50 && kind > 25)
                     kind = 25;
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddTwoStates(98, 99);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddTwoStates(98, 99);
                  break;
               case 99:
                  if (curChar != 46)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(100);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(100);
                  break;
               case 101:
                  if (curChar != 36)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddStates(0, 4);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(103, 104);
                  break;
               case 105:
                  if (curChar != 36)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(104, 106);
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(104, 107);
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(109);
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddTwoStates(111, 112);
                  break;
               case 113:
                  if (curChar == 36)
                     jjCheckNAddStates(11, 13);
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 116:
                  if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if (curChar == 36)
                     jjCheckNAddStates(17, 19);
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 151:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddTwoStates(111, 112);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(109);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(103, 104);
                  }
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddTwoStates(111, 112);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(109);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(103, 104);
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 92:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddTwoStates(111, 112);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(109);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(103, 104);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 95;
                  if (curChar == 110)
                     jjCheckNAdd(91);
                  break;
               case 150:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddTwoStates(111, 112);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(109);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(103, 104);
                  }
                  break;
               case 95:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddTwoStates(111, 112);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(109);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(103, 104);
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 94;
                  else if (curChar == 116)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddTwoStates(111, 112);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(109);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(103, 104);
                  }
                  if (curChar == 112)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  break;
               case 152:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddTwoStates(111, 112);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(109);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(103, 104);
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 126)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  if (curChar == 115)
                     jjAddStates(23, 30);
                  else if (curChar == 105)
                     jjAddStates(31, 32);
                  else if (curChar == 108)
                     jjAddStates(33, 34);
                  else if (curChar == 97)
                     jjAddStates(35, 37);
                  else if (curChar == 116)
                     jjAddStates(38, 39);
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddTwoStates(111, 112);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(109);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(103, 104);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 68:
                  if (curChar == 126 && kind > 21)
                     kind = 21;
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddTwoStates(111, 112);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(109);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(103, 104);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddTwoStates(111, 112);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(109);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(103, 104);
                  }
                  if (curChar == 115)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddTwoStates(111, 112);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(109);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(103, 104);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 1:
                  jjAddStates(5, 7);
                  break;
               case 5:
                  if (curChar == 78 && kind > 19)
                     kind = 19;
                  break;
               case 6:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 68 && kind > 19)
                     kind = 19;
                  break;
               case 11:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 126 && kind > 21)
                     kind = 21;
                  break;
               case 24:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 27:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 30:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 100 && kind > 25)
                     kind = 25;
                  break;
               case 32:
               case 126:
                  if (curChar == 110)
                     jjCheckNAdd(31);
                  break;
               case 34:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 98 && kind > 26)
                     kind = 26;
                  break;
               case 36:
               case 132:
                  if (curChar == 117)
                     jjCheckNAdd(35);
                  break;
               case 38:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 104 && kind > 26)
                     kind = 26;
                  break;
               case 40:
                  if (curChar == 99)
                     jjCheckNAdd(39);
                  break;
               case 41:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               case 46:
                  jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if (curChar == 116)
                     jjAddStates(38, 39);
                  break;
               case 54:
                  if (curChar == 114 && kind > 26)
                     kind = 26;
                  break;
               case 55:
               case 60:
                  if (curChar == 101)
                     jjCheckNAdd(54);
                  break;
               case 56:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 61:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 69:
                  if (curChar == 97)
                     jjAddStates(35, 37);
                  break;
               case 71:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 116 && kind > 26)
                     kind = 26;
                  break;
               case 75:
                  if (curChar == 114)
                     jjCheckNAdd(74);
                  break;
               case 76:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 105 && kind > 26)
                     kind = 26;
                  break;
               case 79:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 108)
                     jjAddStates(33, 34);
                  break;
               case 84:
                  if (curChar == 103 && kind > 25)
                     kind = 25;
                  break;
               case 85:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 116)
                     jjCheckNAdd(39);
                  break;
               case 87:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 105)
                     jjAddStates(31, 32);
                  break;
               case 91:
                  if (curChar == 116 && kind > 25)
                     kind = 25;
                  break;
               case 93:
                  if (curChar == 120 && kind > 26)
                     kind = 26;
                  break;
               case 94:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 96:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 101:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddStates(0, 4);
                  break;
               case 102:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(103, 104);
                  break;
               case 103:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(103, 104);
                  break;
               case 105:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(104, 106);
                  break;
               case 106:
               case 107:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(104, 107);
                  break;
               case 108:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(109);
                  break;
               case 109:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(109);
                  break;
               case 110:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddTwoStates(111, 112);
                  break;
               case 111:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddTwoStates(111, 112);
                  break;
               case 112:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 114:
               case 115:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 117:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 118:
               case 119:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 120:
                  if (curChar == 93 && kind > 34)
                     kind = 34;
                  break;
               case 121:
                  if (curChar == 115)
                     jjAddStates(23, 30);
                  break;
               case 122:
                  if (curChar == 110 && kind > 25)
                     kind = 25;
                  break;
               case 123:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 114)
                     jjCheckNAdd(91);
                  break;
               case 125:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 127:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 105)
                     jjCheckNAdd(74);
                  break;
               case 130:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 133:
                  if (curChar == 109 && kind > 26)
                     kind = 26;
                  break;
               case 134:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 102 && kind > 26)
                     kind = 26;
                  break;
               case 141:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 116)
                     jjCheckNAdd(54);
                  break;
               case 147:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               case 46:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 150 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   102, 104, 108, 110, 112, 1, 2, 4, 48, 49, 47, 114, 116, 120, 115, 116, 
   120, 116, 118, 120, 116, 119, 120, 123, 125, 128, 131, 132, 139, 145, 149, 92, 
   96, 85, 89, 73, 77, 82, 59, 64, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\143\157\156\164\151\156\165\145", 
"\145\170\151\164", "\162\145\164\165\162\156", "\167\150\151\154\145", "\142\162\145\141\153", 
"\145\154\163\145", "\156\145\170\164", "\144\145\154\145\164\145", "\146\157\162", "\151\146", 
"\144\157", "\151\156", "\160\162\151\156\164", "\147\145\164\154\151\156\145", null, 
"\44", null, null, "\50", "\51", null, null, "\73", null, null, null, null, null, 
null, null, null, "\173", "\175", "\46\46", "\174\174", "\54", "\41", "\77", "\72", 
"\57", "\53", "\55", "\52", "\45", "\136", "\52\52", "\53\53", "\55\55", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1fffffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[150];
static private final int[] jjstateSet = new int[300];
static protected char curChar;
/** Constructor. */
public SENTENCETokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public SENTENCETokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 150; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
